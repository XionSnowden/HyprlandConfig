var d=[["on","off"],["bind","unbind"],["addEventListener","removeEventListener"]],c=!1;function r(o){let n,i=null,t=null,s=null;for(n=0;n<d.length&&!i;++n)t=o[d[n][0]],s=o[d[n][1]],typeof t=="function"&&typeof s=="function"&&(i={bind:t,unbind:s});return i}var h=class{constructor(n,i,t,s,e){this.bindFuncs=i,this.obj=t,this.event=s,this.func=function(){n.enabled&&e.apply(this,arguments)}}bind(){this.bindFuncs.bind.call(this.obj,this.event,this.func)}unbind(){this.bindFuncs.unbind.call(this.obj,this.event,this.func)}on(){this.bind()}off(){this.unbind()}},u=class{constructor(){this.bindings=[],this.enabled=!0}bind(n,i,t){let s=r(n);if(!s)throw new Error(`Failed to get binding functions for object: ${n}`);let e=new h(this,s,n,i,t);return this.bindings.push(e),e.bind(),e}unbind(n){let i=this.bindings.length;this.bindings=this.bindings.filter(t=>t!==n),i-this.bindings.length!=1&&c&&(console.warn("Binding Not Found in EventBinder:"),console.dir(n)),n.unbind()}on(n,i,t){return this.bind(n,i,t)}off(n){this.unbind(n)}unbindAll(){[...this.bindings].forEach(i=>{this.unbind(i)}),console.assert(this.bindings.length===0),this.bindings=[]}bindListeners({source:n={},target:i={},eventMap:t={}}={}){Object.entries(t).forEach(([s,e])=>{if(typeof i[e]!="function")throw Error(`Event listener method '${e}' on target does not exist for source event '${s}'`);this.bind(n,s,(...b)=>{i[e](...b)})})}};window.EventBinder=u;export{u as a};
