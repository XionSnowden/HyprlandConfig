import{a as o}from"./chunk-CM6X6NVN.js";var u={"session-ready-for-data-collection":()=>"","page-attributes":()=>"","set-experiment-name":({name:e})=>`name=${e}`,"sparkline-for-column":({baseColId:e,traceColId:t,pixelWidth:r})=>`baseColId=${e}, traceColId=${t}, pixelWidth=${r}`,"data-share-source":({sourceId:e})=>`sourceId=${e}`,"create-new-dataset":[e=>{let{name:t,type:r}=e;return`name=${t}, type=${r}`},e=>{let{dataSetId:t,foreignId:r}=e;return`dataSetId=${t}, foreignId=${r}`}],"create-new-column":[e=>{let{dataSetId:t,name:r,units:n}=e;return`dataSetId=${t}, name=${r}, units=${n}`},e=>{let{columnId:t,foreignId:r}=e;return`columnId=${t}, foreignId=${r}`}],"create-user-manual-column":e=>{let{name:t,unit:r,dataType:n}=e;return`name=${t}, unit=${r}, dataType=${n}`},"create-user-calc-column":e=>{let{name:t,unit:r,calcEquation:n}=e;return`name=${t}, unit=${r}, calcEquation=${n}`},"remove-column-group":({groupId:e})=>`groupId=${e}`,"update-dataset-properties":e=>{let{id:t}=e;return`id=${t}`},"update-column-group":e=>{let{groupId:t,name:r,units:n}=e;return`groupId=${t}, name=${r}, units=${n}`},"update-column-values":({id:e,values:t,trim:r})=>{let n=t.map(a=>`${a}`).join("\\n");return`id=${e}, trim=${r}\\n${n}`},"change-column-data-type":({id:e,type:t})=>`id=${e}, type=${t}`,"add-event-data":({id:e,value:t,readings:r})=>{let n=r.map(a=>`${a}`).join("\\n");return`id=${e}, value=${t}]
${n}`},"change-column-unit":({id:e,unit:t})=>`id=${e}, unit=${t}`,"change-column-properties":({id:e,color:t,symbol:r})=>`id=${e}, color=${t}, symbol=${r}`,"add-graph":[()=>"",({graphId:e})=>`graphId=${e}`],"set-meter-visibility":({visible:e})=>`visible=${e}`,"set-table-visibility":({visible:e})=>`visible=${e}`,"change-graph":({graphId:e,type:t})=>`graphId=${e}, type=${t} ...`,"add-graph-traces":({graphId:e,traces:t})=>{let r=t.map(n=>`baseColumnId=${n.baseColumnId}, traceColumnId=${n.traceColumnId}, isRightAxisTrace=${n.isRightAxisTrace}`).join("\\n");return`graphId=${e}\\n${r}`},"remove-graph-traces":({graphId:e,traces:t})=>{let r=t.map(n=>`baseColumnId=${n.baseColumnId}, traceColumnId=${n.traceColumnId}, isRightAxisTrace=${n.isRightAxisTrace}`).join("\\n");return`graphId=${e}\\n${r}`},"add-graph-curve-fit":({graphId:e,fitId:t,fitType:r,baseColumnId:n,traceColumnId:a})=>`graphId=${e}, fitId=${t}, fitType=${r}, baseColumnId=${n}, traceColumnId=${a}`,"remove-graph-curve-fit":({fitId:e})=>`fitId=${e}`,"add-graph-integral":({graphId:e,integralId:t,baseColumnId:r,traceColumnId:n})=>`graphId=${e}, integralId=${t}, baseColumnId=${r}, traceColumnId=${n}`,"remove-graph-integral":({integralId:e})=>`integralId=${e}`,"add-or-change-graph-peak-integral":e=>{let{graphId:t,integralId:r,baseColumnId:n,traceColumnId:a}=e;return`graphId=${t}, integralId=${r}, baseColumnId=${n}, traceColumnId=${a}`},"remove-graph-peak-integral":({integralId:e})=>`integralId=${e}`,"add-graph-stats":e=>{let{graphId:t,statsId:r,baseColumnId:n,traceColumnId:a}=e;return`graphId=${t}, statsId=${r}, baseColumnId=${n}, traceColumnId=${a}`},"remove-graph-stats":({statsId:e})=>`statsId=${e}`,"add-graph-annotation":e=>{let{parentId:t,annotationId:r}=e;return`parentId=${t}, annotationId=${r}`},"remove-graph-annotation":({annotationId:e})=>`annotationId=${e}`,"create-data-mark":e=>{let{dataSetId:t,duringCollection:r,traceColumnIds:n,text:a,rowIndex:d}=e;return`dataSetId=${t}, duringCollection=${r}, traceColumnIds=${n.join(" ")}, text=${a}, rowIndex=${d}`},"update-data-mark":e=>{let{dataSetId:t,duringCollection:r,traceColumnIds:n,text:a,rowIndex:d}=e;return`dataSetId=${t}, duringCollection=${r}, traceColumnIds=${n.join(" ")}, text=${a}, rowIndex=${d}`},"delete-data-mark":({dataMarkId:e})=>`dataMarkId=${e}`,"remove-dataset":({datasetId:e})=>`datasetId=${e}`,"check-recovery-file":()=>"","document-age":()=>"",export:({name:e,format:t,filepath:r,decimal:n,age:a})=>`name=${e}, format=${t}, filepath=${r}, decimal=${n}, age=${a}`,import:({path:e,format:t,content:r})=>`path=${e}, format=${t}, content=<${r.length} bytes>`,"document-meta-data":({path:e,format:t,content:r})=>`path=${e}, format=${t}, content=<${r.length} bytes>`,"set-session-subtype":({subtype:e})=>`subtype=${e}`,"set-notes-state":({text:e,visible:t})=>`text="${e}", visible=${t}`,"get-notes-state":()=>"","set-custom-curve-fit":({name:e,expression:t})=>`name=${e}, expression=${t}`,"get-custom-curve-fits":()=>"","get-calc-column-functions":()=>"","add-aux-graph":({parentGraphId:e,auxGraphType:t})=>`parentGraphId=${e}, auxGraphType=${t}`,"update-aux-graph":({auxGraphId:e})=>`auxGraphId=${e}`,"delete-aux-graph":({auxGraphId:e})=>`auxGraphId=${e}`},$={"dw:data-set-added":e=>`id=${e.id}, name=${e.name}, type=${e.type}`,"dw:data-set-ready":e=>`id=${e.id}`,"dw:data-set-removed":e=>`id=${e.id}`,"dw:data-column-added":e=>`id=${e.id}, groupId=${e.groupId}, dataSetId=${e.dataSetId}, type=${e.type}`,"dw:data-column-removed":e=>`id=${e.id}`,"dw:data-column-updated":e=>`id=${e.id}`,"dw:data-set-updated":e=>`id=${e.id}', name=${e.name??""}`,"dw:unit-change-finished":e=>`columnId=${e.columnId}`,"dw:data-set-row-added":e=>e.map(r=>{let{dataSetId:n}=r,{rowIndex:a}=r,{count:d}=r;return`dataSetId=${n}, rowIndex=${a}, count=${d}`}).join("\\n"),"dw:data-column-values-updated":e=>e.map(r=>{let{columnId:n,rows:a,values:d,wholeColumnFlag:p}=r,c=[];for(let s=0;s<Math.min(a.length,d.length);s++)c.push(`row=${a[s]}, value=${d[s]}`);return`columnId=${n}, wholeColumn=${p}\\n${c.join("\\n")}`}).join("\\n"),"dw:data-column-live-readout-changed":e=>{let{columnId:t,value:r}=e;return`columnId=${t}, value=${r}`},"dw:data-graph-updated":e=>`index=${e.index}, type=${e.type}`,"dw:data-annotation-updated":e=>`id=${e.annotationId}`,"dw:data-video-updated":()=>"","dw:data-group-added":e=>{let{id:t,name:r,units:n,type:a}=e;return`id=${t}, name=${r}, units=${n} type=${a}`},"dw:data-group-removed":e=>`id=${e.id}`,"dw:data-group-properties-changed":e=>`id=${e.id} ...`,"dw:session-started":()=>"","dw:document-age-updated":()=>"","gc-collection-started":()=>"","collection-ended":()=>"","complete-collection":()=>"","trigger-reached":()=>"","prestore-reached":()=>"","replay-engine-update":()=>""};var i={"start-bluetooth-discovery":()=>"","stop-bluetooth-discovery":()=>"","start-labquest-stream-discovery":()=>"","stop-labquest-stream-discovery":()=>"","connect-bluetooth-device":({deviceId:e})=>`deviceId=${e}`,"disconnect-device":({deviceId:e})=>`deviceId=${e}`,"enable-device-channel":({deviceId:e,channelId:t,enable:r})=>`deviceId=${e}, channelId=${t}, enable=${r}`,"identify-device":({deviceId:e})=>`deviceId=${e}`,"get-gdxdevice-map":({deviceId:e})=>`deviceId=${e}`,"write-device-attributes":({deviceID:e,attributes:t})=>{let r=t.map(n=>`id=${n.attribID}, value=${n.value}`).join("\\n");return`deviceID=${e}\\n${r}`},"start-calibration-process":({deviceId:e,processId:t})=>`deviceId=${e}, processId=${t}`,"start-calibration-step":({deviceId:e,processId:t,stepId:r,inputValue:n})=>`deviceId=${e}, processId=${t}, stepId=${r}, inputValue=${n}`,"update-calibration-step":({deviceId:e,processId:t,stepId:r,inputValue:n})=>`deviceId=${e}, processId=${t}, stepId=${r}, inputValue=${n}`,"stop-calibration-step":({deviceId:e,processId:t,stepId:r,keep:n})=>`deviceId=${e}, processId=${t}, stepId=${r}, keep=${n}`,"stop-calibration-process":({deviceId:e,processId:t,keep:r})=>`deviceId=${e}, processId=${t}, keep=${r}`,"reset-factory-calibration":({deviceId:e})=>`deviceId=${e}`,"using-factory-calibration":({deviceId:e})=>`deviceId=${e}`},l={"devmgr:bluetooth-available":({available:e})=>`available=${e}`,"devmgr:bluetooth-device-discovered":e=>{let{id:t,name:r,type:n}=e;return`id=${t}, name=${r}, type=${n} ...`},"devmgr:bluetooth-device-removed":({id:e})=>`id=${e}`,"devmgr:bluetooth-device-updated":e=>{let{id:t,name:r,type:n}=e;return`id=${t}, name=${r}, type=${n} ...`},"devmgr:usb-device-added":e=>{let{id:t,name:r,type:n}=e;return`id=${t}, name=${r}, type=${n} ...`},"devmgr:usb-device-removed":({id:e})=>`id=${e}`,"devmgr:usb-device-updated":e=>{let{id:t,name:r,type:n}=e;return`id=${t}, name=${r}, type=${n} ...`},"devmgr:calibration-step-result":({id:e,result:t})=>{let{value:r,success:n}=t;return`id=${e}, value=${r}, success=${n}`},"devmgr:device-attributes-changed":({deviceId:e,deviceAttributes:t})=>{let{id:r,type:n,value:a,description:d}=t;return`deviceId=${e}, attrib: id=${r}, type=${n}, value=${a}, description="${d}" ...`}};var m=e=>(Object.keys(e).forEach(t=>{let r=e[t];if(Array.isArray(r)){let[n]=r;e[t]=n}}),e),I=e=>{let t={};return Object.keys(e).forEach(r=>{let n=e[r];if(Array.isArray(n)){let[,a]=n;t[r]=a}}),t},g=m(o(o({},u),i)),h=I(o(o({},u),i)),v=o(o({},$),l),y=class{constructor(){this.emptyHandler=()=>"",this.startTime=Date.now(),this.msgLog=[]}get msgTimestamp(){return Date.now()-this.startTime}logRequest(t,r,n){let a=g[n.method]??this.emptyHandler;this.msgLog.push(`${t}->${r}: [${this.msgTimestamp}] Request[${n.id}]: **${n.method}** ${a(n.params)}`)}logErrorResponse(t,r,n,a){this.msgLog.push(`${t}-#red>${r}: [${this.msgTimestamp}] Error[${a.id}]: **${n}**: ${a.error.message}`)}logResponse(t,r,n,a){if(a.error){this.logErrorResponse(t,r,n,a);return}let d=h[n]??this.emptyHandler;this.msgLog.push(`${t}->${r}: [${this.msgTimestamp}] Response[${a.id}]: **${n}** ${d(a.result)}`)}logNotification(t,r,n){let a=v[n.method]??this.emptyHandler;this.msgLog.push(`${t}--#darkgrey>${r}: [${this.msgTimestamp}] Notification: **${n.method}** ${a(n.params)}`)}getLogString(){return this.msgLog.join(`
`)}clearLog(){this.msgLog.length=0}};export{y as RPCLogger};
